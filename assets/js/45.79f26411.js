(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{446:function(t,s,a){"use strict";a.r(s);var n=a(15),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"aggregation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aggregation"}},[t._v("#")]),t._v(" Aggregation")]),t._v(" "),a("p",[t._v("在这节课中，我们将看一看对象组合的另一种子类型，称为聚合。")]),t._v(" "),a("h2",{attrs:{id:"aggregation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aggregation-2"}},[t._v("#")]),t._v(" Aggregation")]),t._v(" "),a("hr"),t._v("要成为一个Aggregation，整个对象及其部分必须具有以下关系:\n"),a("ul",[a("li",[t._v("The part (member) is part of the object (class).")]),t._v(" "),a("li",[t._v("The part (member) can belong to "),a("strong",[t._v("more than")]),t._v(" one object (class) at a time.")]),t._v(" "),a("li",[t._v("The part (member) does "),a("em",[t._v("not")]),t._v(" have its existence managed by the object (class)")]),t._v(" "),a("li",[t._v("The part (member) does not know about the existence of the object (class)")])]),t._v(" "),a("p",[t._v("与组合一样，聚合仍然是部分-整体关系，其中部分包含在整体中，并且是单向关系。然而，与组合不同的是，部件可以同时属于多个对象，整个对象不负责部件的存在和寿命。创建聚合时，该聚合不负责创建各部分。当一个聚合被销毁时，该聚合不负责销毁部分。")]),t._v(" "),a("p",[t._v("例如，考虑一个人和他们的家庭地址之间的关系。在本例中，为简单起见，我们将说每个人都有一个地址。然而，这个地址可以同时属于多个人:例如，你和你的室友或其他重要的人。然而，这个地址并不是由人管理的——这个地址可能在人到达之前就存在了，在人离开之后还会存在。此外，一个人知道他们住在什么地址，但地址不知道什么人住在那里。因此，这是一种聚合关系。")]),t._v(" "),a("p",[t._v("或者，考虑一辆汽车和一个引擎。汽车引擎是汽车的一部分。虽然引擎是属于汽车的，但它也可以属于其他东西，比如汽车的所有者。汽车对发动机的产生或损坏不负责。虽然汽车知道它有一个引擎(它必须这样才能到达任何地方)，但引擎并不知道它是汽车的一部分。")]),t._v(" "),a("p",[t._v("当涉及到建模物理对象时，使用术语“破坏”可能有点冒险。有人可能会说:“如果一颗流星从天上掉下来，砸坏了汽车，汽车的零件不也都毁了吗?”是的,当然。但那是流星的错。重要的一点是，汽车并不需要对其部件的损坏负责(但外力可能会造成损坏)。")]),t._v(" "),a("p",[t._v("我们可以说聚合模型“具有”关系(一个部门有老师，汽车有引擎)。与组合类似，聚合的各个部分可以是单数，也可以是乘法。")]),t._v(" "),a("h2",{attrs:{id:"implementing-aggregations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementing-aggregations"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Implementing aggregations")])]),t._v(" "),a("hr"),t._v("因为聚合类似于组合，它们都是部分-整体关系，所以它们的实现几乎相同，它们之间的区别主要是语义上的。在组合中，我们通常使用普通成员变量(或由组合类处理分配和回收过程的指针)将我们的部件添加到组合中。\n"),a("p",[t._v("在聚合中，我们还将部件添加为成员变量。但是，这些成员变量通常是引用或指针，用于指向在类作用域之外创建的对象。因此，聚合通常要么接受它将要指向的对象作为构造函数参数，要么以空开头，然后通过访问函数或操作符添加子对象。")]),t._v(" "),a("p",[t._v("因为这些部分存在于类的作用域之外，所以当撤销类时，指针或引用成员变量将被撤销(但不删除)。因此，各部分本身将仍然存在。")]),t._v(" "),a("p",[t._v("让我们更详细地看看一个教师和系里的例子。在这个例子中，我们将做一些简化:首先，这个部门将只有一个老师。第二，老师将不知道他们属于哪个系。")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Teacher")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string m_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Teacher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" m_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Department")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Teacher"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" m_teacher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This dept holds only one teacher for simplicity, but it could hold many teachers")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Department")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Teacher"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" teacher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" m_teacher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" teacher "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a teacher outside the scope of the Department")]),t._v("\n  Teacher bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// create a teacher")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a department and use the constructor parameter to pass")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the teacher to it.")]),t._v("\n    Department department"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bob "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// department goes out of scope here and is destroyed")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bob still exists here, but the department doesn't")]),t._v("\n \n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" still exists!\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br")])]),a("p",[t._v("在本例中，"),a("code",[t._v("bob")]),t._v("是独立于"),a("code",[t._v("department")]),t._v("创建的，然后传递到"),a("code",[t._v("department")]),t._v("的构造函数中。当"),a("code",[t._v("department")]),t._v("被销毁时，"),a("code",[t._v("m_teacher")]),t._v("引用被销毁，但是"),a("code",[t._v("teacher")]),t._v("本身没有被销毁，所以它仍然存在，直到后来在"),a("code",[t._v("main()")]),t._v("中被独立销毁。")]),t._v(" "),a("h2",{attrs:{id:"pick-the-right-relationship-for-what-you-re-modeling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pick-the-right-relationship-for-what-you-re-modeling"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Pick the right relationship for what you’re modeling")])]),t._v(" "),a("hr"),t._v("虽然在上面的例子中，老师们不知道他们在为哪个部门工作看起来有点傻，但这在给定的项目中可能是完全没问题的。当您决定要实现哪种关系时，请实现满足您需求的最简单的关系，而不是看起来最适合于现实环境的关系。\n"),a("p",[t._v("例如，如果您正在编写一个车身修理厂模拟器，您可能希望将汽车和引擎实现为聚合，这样引擎就可以被移除并放在某个地方以备以后使用。然而，如果你正在编写一个赛车模拟，你可能想要将汽车和引擎作为一个组合来实现，因为引擎在那个上下文中永远不会出现在汽车之外。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("Rule:")])]),t._v(" "),a("p",[t._v("Implement the simplest relationship type that meets the needs of your program, not what seems right in real-life.")])]),t._v(" "),a("h2",{attrs:{id:"summarizing-composition-and-aggregation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summarizing-composition-and-aggregation"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Summarizing composition and aggregation")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Compositions:")]),t._v(" "),a("ul",[a("li",[t._v("Typically use normal member variables")]),t._v(" "),a("li",[t._v("Can use pointer members if the class handles object allocation/deallocation itself")]),t._v(" "),a("li",[t._v("Responsible for creation/destruction of parts")])]),t._v(" "),a("p",[t._v("Aggregations:")]),t._v(" "),a("ul",[a("li",[t._v("Typically use pointer or reference members that point to or reference objects that live outside the scope of the aggregate class.")]),t._v(" "),a("li",[t._v("Not responsible for creating/destroying parts")])]),t._v(" "),a("p",[t._v("值得注意的是，组合和聚合的概念不是互斥的，可以在同一个类中自由混合。编写一个只负责创建/销毁某些部分而不负责其他部分的类是完全可能的。例如，我们的Department类可以有一个名称和一个Teacher。这个名字很可能会以组合的方式添加到新闻部，并与新闻部一起创建和销毁。另一方面，教师通过聚合的方式被添加到系里，独立创建/销毁。")]),t._v(" "),a("p",[t._v("然聚合可能非常有用，但它们也可能更危险，因为聚合不处理其部分的重新分配。释放则留给外部方去做。如果外部方不再拥有对被抛弃部分的指针或引用，或者如果它仅仅忘记做清理工作(假设类将处理这些工作)，那么内存就会泄漏。")]),t._v(" "),a("p",[t._v("出于这个原因，组合应该优先于聚合。")]),t._v(" "),a("h2",{attrs:{id:"a-few-warnings-errata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-few-warnings-errata"}},[t._v("#")]),t._v(" "),a("strong",[t._v("A few warnings/errata")])]),t._v(" "),a("hr"),t._v("由于各种历史和背景原因，与组合不同，聚合的定义并不精确——因此您可能会看到其他参考材料对它的定义与我们的不同。没关系，只是要注意。\n"),a("p",[t._v("最后一点注意:在Structs课程中，我们将聚合数据类型(如Structs和类)定义为将多个变量组合在一起的数据类型。您还可以在c++旅程中使用聚合类这个术语，它被定义为没有提供构造函数、析构函数或重载赋值的结构或类，具有所有公共成员，并且不使用继承——本质上是一个普通的老数据结构。尽管在命名上有相似之处，但aggregates和aggregation是不同的，不应该混淆。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("code",[t._v("std::reference_wrapper")])]),t._v(" "),a("p",[t._v("在上面的 Department/Teacher 示例中，我们在 Department 中使用了一个引用来存储教师。如果只有一个教师，这可以正常工作，但如果有教师列表，比如 std::vector，我们就不能再使用引用了")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Teacher"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m_teachers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Illegal")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("列表元素不能是引用，因为引用必须被初始化，不能被重新赋值。我们可以不使用引用，而是使用指针，但这将为存储或传递空指针打开了可能性。在Department/Teacher的例子中，我们不允许空指针。为了解决这个问题，有````std::reference_wrapper`.```")]),t._v(" "),a("p",[t._v("本质上，"),a("code",[t._v("std::reference_wrapper")]),t._v("是一个类似引用的类，但也允许赋值和复制，所以它与"),a("code",[t._v("std::vector")]),t._v("这样的列表兼容。")]),t._v(" "),a("p",[t._v("好消息是，你不需要真正理解它是如何工作的。你只需要知道三件事:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("std::reference_wrapper")]),t._v(" lives in the "),a("code",[t._v("<functional>")]),t._v(" header.")]),t._v(" "),a("li",[t._v("When you create your "),a("code",[t._v("std::reference_wrapper")]),t._v(" wrapped object, the object can’t be an anonymous object (since anonymous objects have expression scope would leave the reference dangling).")]),t._v(" "),a("li",[t._v("When you want to get your object back out of "),a("code",[t._v("std::reference_wrapper")]),t._v(", you use the "),a("code",[t._v("get()")]),t._v(" member function.")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<functional>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// std::reference_wrapper")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string tom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string berta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Berta"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("reference_wrapper"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" berta "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string jim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jim"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the get() member function to get the referenced string.")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" Beam"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" jim "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Jim Beam")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("p",[t._v("To create a vector of const references, we’d have to add const before the "),a("code",[t._v("std::string")]),t._v(" like so")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vector of const references to std::string")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("reference_wrapper"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" berta "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如果在这一点上这看起来有点晦涩难懂(特别是嵌套类型)，在我们介绍模板类之后再来讨论它，您可能会发现它更容易理解。")])])}),[],!1,null,null,null);s.default=e.exports}}]);