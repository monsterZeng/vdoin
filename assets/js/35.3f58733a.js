(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{544:function(t,s,a){"use strict";a.r(s);var r=a(15),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v("在c++中，操作符使用函数来实现的。通过在操作符函数上使用函数重载，您可以定义自己的操作符版本，用于不同的数据类型(包括您编写的类)。使用函数重载去重载操作符称为操作符重载。")]),t._v(" "),a("h2",{attrs:{id:"operators-as-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators-as-functions"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Operators as functions")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("编译器为整型操作数提供了内置的加号操作符(+)——这个函数将整数x和y相加并返回一个整型结果。当您看到表达式x + y时，您可以在头脑中将其转换为函数调用operator+(x, y)(其中operator+是函数的名称)。")]),t._v(" "),a("p",[t._v("现在考虑一下如果我们尝试相加两个用户定义类的对象会发生什么:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Mystring string1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMystring string2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" string1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" string2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("你认为在这种情况下会发生什么?直观的预期结果是字符串“Hello, World!”会在屏幕上打印出来。但是，因为"),a("code",[t._v("Mystring")]),t._v("是用户定义的类，所以编译器没有内置的加号操作符来处理"),a("code",[t._v("Mystring")]),t._v("操作数。在这种情况下，它会给我们一个错误。为了使它像我们希望的那样工作，我们需要编写一个重载函数来告诉编译器+操作符应该如何处理两个"),a("code",[t._v("Mystring")]),t._v("类型的操作数。我们将在下一课中学习如何做到这一点。")]),t._v(" "),a("h2",{attrs:{id:"resolving-overloaded-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolving-overloaded-operators"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Resolving overloaded operators")])]),t._v(" "),a("p",[t._v("当对包含操作符的表达式求值时，编译器使用以下规则:")]),t._v(" "),a("ol",[a("li",[t._v("如果所有的操作数都是基本数据类型，那么编译器将调用内置例程(如果有的话)。如果不存在，编译器将产生一个编译器错误。")]),t._v(" "),a("li",[t._v("如果任何操作数是用户数据类型(例如，某个类或枚举类型)，编译器会查看该类型是否有可以调用的匹配重载操作符函数。如果找不到，"),a("font",{attrs:{color:"red"}},[t._v("它将尝试将一个或多个用户定义的类型操作数转换为基本数据类型，以便使用匹配的内置操作符(通过重载类型转换，我们将在本章后面介绍)。")]),t._v("如果失败，则会产生一个编译错误。")],1)]),t._v(" "),a("h2",{attrs:{id:"what-are-the-limitations-on-operator-overloading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-limitations-on-operator-overloading"}},[t._v("#")]),t._v(" "),a("strong",[t._v("What are the limitations on operator overloading?")])]),t._v(" "),a("p",[t._v("首先，c++中几乎所有现有的操作符都可以重载。例外情况包括:条件选择("),a("code",[t._v("?:")]),t._v(")、"),a("code",[t._v("sizeof")]),t._v("、作用域("),a("code",[t._v("::")]),t._v(")、成员选择器("),a("code",[t._v(".")]),t._v(")、成员指针选择器("),a("code",[t._v(".*")]),t._v(")、"),a("code",[t._v("typeid")]),t._v("和类型转换操作符。")]),t._v(" "),a("p",[t._v("其次，只能重载现有的操作符。不能创建新的操作符或重命名现有操作符。例如，您不能创建运算符**来执行指数运算。")]),t._v(" "),a("p",[t._v("第三，重载操作符中至少有一个操作数必须是用户定义的类型。这意味着不能重载+操作符来处理一个整数和一个double。但是，您可以重载plus操作符来处理一个整数和一个"),a("code",[t._v("Mystring")]),t._v("。")]),t._v(" "),a("p",[t._v("第四，不能改变操作符支持的操作数的数量。")]),t._v(" "),a("p",[t._v("最后，所有的操作符都保持其默认的优先级和结合性(不管它们用于什么)，这是不能更改的。")]),t._v(" "),a("p",[t._v("一些新程序员试图重载位异或操作符(^)来进行求幂。然而，在c++中，运算符^的优先级低于基本算术运算符，这会导致表达式求值不正确。在基础数学中，取幂比基本算术更重要，所以4 + 3 ^ 2 = 4 +(3 ^ 2)=> 4 + 9 => 13。然而，在c++中，算术运算符的优先级高于运算符^，因此4 + 3 ^ 2解析为(4 + 3)^ 2 => 7 ^ 2 => 49。")]),t._v(" "),a("p",[t._v("每次使用指数部分都需要显式地加上括号(例如4 +(3 ^ 2))，这样才能正常工作，这并不直观，而且可能容易出错。由于这个优先级问题，通常最好以类似于操作符最初意图的方式使用操作符。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("em",[t._v("Rule: When overloading operators, it’s best to keep the function of the operators as close to the original intent of the operators as possible.")])])],1),t._v(" "),a("p",[t._v("此外，由于操作符没有描述性名称，所以它们的用途并不总是明确的。例如，对于字符串类来说，使用operator+进行字符串连接可能是一个合理的选择。那么operator-呢?你认为这会产生什么效果?目前尚不清楚。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("em",[t._v("Rule: If the meaning of an operator when applied to a custom class is not clear and intuitive, use a named function instead.")])])],1),t._v(" "),a("p",[t._v("在这些范围内，您仍然会发现许多有用的功能可以重载您的自定义类!可以重载+操作符来连接用户定义的字符串类，或者将两个Fraction类对象添加在一起。您可以重载<<操作符，以便将类打印到屏幕(或文件)。可以重载相等操作符(==)来比较两个类对象。这使得操作符重载成为c++中最有用的特性之一——仅仅是因为它允许您以更直观的方式处理类。")])])}),[],!1,null,null,null);s.default=e.exports}}]);