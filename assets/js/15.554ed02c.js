(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{526:function(t,i,s){"use strict";s.r(i);var a=s(15),e=Object(a.a)({},(function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"raii-resource-acquisition-is-initalization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raii-resource-acquisition-is-initalization"}},[t._v("#")]),t._v(" RAII——Resource Acquisition Is Initalization")]),t._v(" "),s("p",[t._v("​\tRAII（资源获取即是初始化）是一种编程技术，通过该技术，资源使用与具有自动持续时间的对象（例如，非动态分配的对象）的生存期相关。在C ++中，RAII通过带有构造函数和析构函数的类实现。"),s("font",{attrs:{color:"red"}},[t._v("通常在对象的构造函数中获取资源（例如内存，文件或数据库句柄等）（尽管在有意义的情况下也可以在创建对象之后获取资源）")]),t._v("。然后可以在对象处于活动状态时使用该资源。当对象被销毁时，资源将在析构函数中释放。 RAII的主要优点是，由于所有资源持有对象都会自动清除，因此它有助于防止资源泄漏（例如，未释放内存）。")],1),t._v(" "),s("p",[t._v("​\t注意，如果使用exit()函数，程序将终止，不会调用析构函数。如果你依赖析构函数来做必要的清理工作(例如，在退出之前向日志文件或数据库写入一些东西)，要小心。")])])}),[],!1,null,null,null);i.default=e.exports}}]);