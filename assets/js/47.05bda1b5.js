(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{555:function(t,a,e){"use strict";e.r(a);var r=e(15),i=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"introduction-to-inheritance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-inheritance"}},[t._v("#")]),t._v(" Introduction to inheritance")]),t._v(" "),e("p",[t._v("对象组合涉及通过组合和连接其他对象来创建新对象，而继承则涉及通过直接获取其他对象的属性和行为，然后扩展或专门化它们来创建新对象。像对象组合一样，继承在现实生活中无处不在。当你怀孕时，你继承了父母的基因，并从他们身上获得了身体属性——但之后你又在上面加上了自己的个性。技术产品(电脑、手机等)继承了其前辈的特性(通常用于向后兼容)。例如，英特尔奔腾处理器继承了英特尔486处理器定义的许多特性，而英特尔486处理器本身继承了早期处理器的特性。c++继承了它所基于的C语言的许多特性，")]),t._v(" "),e("p",[t._v("想想苹果和香蕉。虽然苹果和香蕉是不同的水果，但它们都有一个共同点，那就是它们都是水果。因为苹果和香蕉都是水果，简单的逻辑告诉我们任何对水果成立的东西对苹果和香蕉也成立。例如，所有的水果都有名称、颜色和大小。因此，苹果和香蕉也有名字、颜色和大小。我们可以说苹果和香蕉继承了水果的这些特性，因为它们是水果。我们也知道水果要经过一个成熟的过程，才可以食用。因为苹果和香蕉是水果，我们也知道苹果和香蕉会遗传成熟的行为。")]),t._v(" "),e("p",[t._v("在图表中，苹果、香蕉和水果之间的关系可能是这样的:")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://learncpp.com/images/CppTutorial/Section11/FruitInheritance.gif",alt:"img"}})]),t._v(" "),e("p",[t._v("这个图定义了一个层次结构。")]),t._v(" "),e("h2",{attrs:{id:"hierarchies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hierarchies"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Hierarchies")])]),t._v(" "),e("p",[t._v("层次结构是显示各种对象之间如何关联的图表。大多数等级要么显示随着时间的发展(386 -> 486 -> Pentium)，要么按照从一般到具体的方式进行分类(水果->苹果->红色美味)。如果你学过生物学，你会发现著名的领域、界、门、纲、目、科、属和种的排序定义了一个层次(从一般到特定)。")]),t._v(" "),e("p",[t._v("这是另一个层次结构的例子:一个正方形是一个矩形，它是一个四边形，它是一个形状。直角三角形就是三角形，也是一种形状。放到一个层次图中，就像这样:")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://learncpp.com/images/CppTutorial/Section11/ShapesInheritance.gif",alt:"img"}})]),t._v(" "),e("p",[t._v("此图从一般(顶部)到特定(底部)，层次结构中的每一项都继承其上一项的属性和行为。")]),t._v(" "),e("h2",{attrs:{id:"a-look-ahead"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-look-ahead"}},[t._v("#")]),t._v(" "),e("strong",[t._v("A look ahead")])]),t._v(" "),e("p",[t._v("在本章中，我们将探讨c++中继承的基本原理。")]),t._v(" "),e("p",[t._v("下一章，我们将探讨继承如何通过虚函数实现多态(面向对象编程的一个大术语)。")]),t._v(" "),e("p",[t._v("随着我们的进展，我们还将讨论继承的主要好处，以及一些缺点。")])])}),[],!1,null,null,null);a.default=i.exports}}]);